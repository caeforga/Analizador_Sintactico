
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 05 22:42:00 COT 2021
//----------------------------------------------------

package analizadorSin;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 05 22:42:00 COT 2021
  */
public class sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintax() {super();}

  /** Constructor which sets the default scanner. */
  public sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\007\005\000\002\007" +
    "\006\000\002\010\004\000\002\010\003\000\002\010\004" +
    "\000\002\010\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\011" +
    "\005\000\002\011\007\000\002\011\005\000\002\011\007" +
    "\000\002\011\006\000\002\012\004\000\002\012\003\000" +
    "\002\013\005\000\002\014\005\000\002\015\004\000\002" +
    "\015\003\000\002\015\004\000\002\015\003\000\002\016" +
    "\011\000\002\017\011\000\002\017\013\000\002\020\010" +
    "\000\002\002\003\000\002\005\005\000\002\005\003\000" +
    "\002\006\005\000\002\006\003\000\002\003\005\000\002" +
    "\003\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\021\004\001\002\000\022\005\020\013" +
    "\007\015\015\016\017\024\013\025\012\026\022\031\011" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\004\005\051\001\002\000\034\005\ufffd\013\ufffd" +
    "\015\ufffd\016\ufffd\020\ufffd\024\ufffd\025\ufffd\026\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\036\ufffd\037\ufffd\001\002\000\010" +
    "\005\035\016\017\025\012\001\002\000\004\005\051\001" +
    "\002\000\004\006\110\001\002\000\034\005\ufff9\013\ufff9" +
    "\015\ufff9\016\ufff9\020\ufff9\024\ufff9\025\ufff9\026\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\036\ufff9\037\ufff9\001\002\000\004" +
    "\006\060\001\002\000\024\005\035\013\007\015\015\016" +
    "\017\020\057\024\013\025\012\026\022\031\011\001\002" +
    "\000\004\005\051\001\002\000\024\005\035\013\007\015" +
    "\015\016\017\024\013\025\012\026\022\031\011\035\036" +
    "\001\002\000\034\005\ufff7\013\ufff7\015\ufff7\016\ufff7\020" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\036\ufff7\037\ufff7\001\002\000\006\005\026\023\027\001" +
    "\002\000\034\005\ufffb\013\ufffb\015\ufffb\016\ufffb\020\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb\036" +
    "\ufffb\037\ufffb\001\002\000\034\005\ufff3\013\ufff3\015\ufff3" +
    "\016\ufff3\020\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\036\ufff3\037\ufff3\001\002\000\034\005\ufff5" +
    "\013\ufff5\015\ufff5\016\ufff5\020\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\036\ufff5\037\ufff5\001\002" +
    "\000\010\005\uffe6\014\uffe6\023\uffe6\001\002\000\010\005" +
    "\uffe8\014\uffe8\023\uffe8\001\002\000\010\005\032\014\031" +
    "\023\033\001\002\000\034\005\uffea\013\uffea\015\uffea\016" +
    "\uffea\020\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031\uffea" +
    "\032\uffea\036\uffea\037\uffea\001\002\000\010\005\uffe7\014" +
    "\uffe7\023\uffe7\001\002\000\010\005\uffe9\014\uffe9\023\uffe9" +
    "\001\002\000\024\005\035\013\007\015\015\016\017\020" +
    "\041\024\013\025\012\026\022\031\011\001\002\000\004" +
    "\035\036\001\002\000\004\004\037\001\002\000\004\014" +
    "\040\001\002\000\036\005\uffee\013\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\024\uffee\025\uffee\026\uffee\030\uffee\031" +
    "\uffee\032\uffee\036\uffee\037\uffee\001\002\000\004\002\uffff" +
    "\001\002\000\034\005\ufffe\013\ufffe\015\ufffe\016\ufffe\020" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\036\ufffe\037\ufffe\001\002\000\034\005\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\020\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\036\ufffa\037\ufffa\001\002\000\034\005" +
    "\ufff8\013\ufff8\015\ufff8\016\ufff8\020\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\030\ufff8\031\ufff8\032\ufff8\036\ufff8\037\ufff8\001" +
    "\002\000\034\005\ufffc\013\ufffc\015\ufffc\016\ufffc\020\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\036" +
    "\ufffc\037\ufffc\001\002\000\034\005\ufff4\013\ufff4\015\ufff4" +
    "\016\ufff4\020\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\036\ufff4\037\ufff4\001\002\000\034\005\ufff6" +
    "\013\ufff6\015\ufff6\016\ufff6\020\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\036\ufff6\037\ufff6\001\002" +
    "\000\010\005\053\014\052\035\054\001\002\000\010\005" +
    "\uffec\014\uffec\035\uffec\001\002\000\036\005\ufff2\013\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\036\ufff2\037\ufff2\001\002" +
    "\000\010\005\uffed\014\uffed\035\uffed\001\002\000\004\004" +
    "\055\001\002\000\004\014\056\001\002\000\036\005\ufff1" +
    "\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1\036\ufff1\037\ufff1" +
    "\001\002\000\004\002\000\001\002\000\010\004\061\005" +
    "\070\006\063\001\002\000\012\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\001\002\000\012\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\001\002\000\010\004\061\005\070\006\063\001\002" +
    "\000\004\007\077\001\002\000\006\007\uffe1\011\075\001" +
    "\002\000\006\007\uffdf\011\uffdf\001\002\000\012\007\uffdd" +
    "\010\072\011\uffdd\012\071\001\002\000\012\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\001\002\000\010\004\061\005\070" +
    "\006\063\001\002\000\010\004\061\005\070\006\063\001" +
    "\002\000\010\007\uffde\011\uffde\012\071\001\002\000\012" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\001\002\000\010\004" +
    "\061\005\070\006\063\001\002\000\006\007\uffe0\011\uffe0" +
    "\001\002\000\004\027\100\001\002\000\022\005\035\013" +
    "\007\015\015\016\017\024\013\025\012\026\022\031\011" +
    "\001\002\000\026\005\035\013\007\015\015\016\017\024" +
    "\013\025\012\026\022\030\103\031\011\036\102\001\002" +
    "\000\022\005\035\013\007\015\015\016\017\024\013\025" +
    "\012\026\022\031\011\001\002\000\034\005\uffe4\013\uffe4" +
    "\015\uffe4\016\uffe4\020\uffe4\024\uffe4\025\uffe4\026\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\036\uffe4\037\uffe4\001\002\000\024" +
    "\005\035\013\007\015\015\016\017\024\013\025\012\026" +
    "\022\030\105\031\011\001\002\000\034\005\uffe3\013\uffe3" +
    "\015\uffe3\016\uffe3\020\uffe3\024\uffe3\025\uffe3\026\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\036\uffe3\037\uffe3\001\002\000\004" +
    "\007\107\001\002\000\012\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\001\002\000\010\004\061\005\070\006\063\001\002" +
    "\000\004\007\112\001\002\000\004\034\113\001\002\000" +
    "\022\005\035\013\007\015\015\016\017\024\013\025\012" +
    "\026\022\031\011\001\002\000\024\005\035\013\007\015" +
    "\015\016\017\024\013\025\012\026\022\031\011\032\115" +
    "\001\002\000\034\005\uffe5\013\uffe5\015\uffe5\016\uffe5\020" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\036\uffe5\037\uffe5\001\002\000\010\005\053\014\117\035" +
    "\120\001\002\000\036\005\ufff0\013\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\036\ufff0\037\ufff0\001\002\000\004\004\121" +
    "\001\002\000\004\014\122\001\002\000\036\005\uffef\013" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\024\uffef\025\uffef" +
    "\026\uffef\030\uffef\031\uffef\032\uffef\036\uffef\037\uffef\001" +
    "\002\000\004\017\124\001\002\000\010\005\035\016\017" +
    "\025\012\001\002\000\022\005\035\013\007\015\015\016" +
    "\017\024\013\025\012\026\022\031\011\001\002\000\024" +
    "\005\035\013\007\015\015\016\017\024\013\025\012\026" +
    "\022\031\011\037\127\001\002\000\034\005\uffe2\013\uffe2" +
    "\015\uffe2\016\uffe2\020\uffe2\024\uffe2\025\uffe2\026\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\036\uffe2\037\uffe2\001\002\000\006" +
    "\005\053\014\131\001\002\000\034\005\uffeb\013\uffeb\015" +
    "\uffeb\016\uffeb\020\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\036\uffeb\037\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\007\004\001\001\000\020\010\015\011" +
    "\007\013\022\014\013\016\020\017\024\020\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\127\001" +
    "\001\000\002\001\001\000\004\011\122\001\001\000\004" +
    "\012\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\041\013\044\014\042\016\043" +
    "\017\046\020\045\001\001\000\004\012\047\001\001\000" +
    "\020\010\033\011\007\013\022\014\013\016\020\017\024" +
    "\020\023\001\001\000\002\001\001\000\004\015\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\041\013\044\014\042\016\043\017\046\020\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\063\003\066\004\061\005\064\006\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\105\003" +
    "\066\004\061\005\064\006\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\073\001\001\000\006\003\072" +
    "\004\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\066\004\061\006\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\100\011\007\013\022\014" +
    "\013\016\020\017\024\020\023\001\001\000\016\011\041" +
    "\013\044\014\042\016\043\017\046\020\045\001\001\000" +
    "\020\010\103\011\007\013\022\014\013\016\020\017\024" +
    "\020\023\001\001\000\002\001\001\000\016\011\041\013" +
    "\044\014\042\016\043\017\046\020\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\110\003\066\004\061\005\064\006\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\113\011\007\013" +
    "\022\014\013\016\020\017\024\020\023\001\001\000\016" +
    "\011\041\013\044\014\042\016\043\017\046\020\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\124\001\001\000\020\010\125" +
    "\011\007\013\022\014\013\016\020\017\024\020\023\001" +
    "\001\000\016\011\041\013\044\014\042\016\043\017\046" +
    "\020\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintax$actions {
  private final sintax parser;

  /** Constructor */
  CUP$sintax$actions(sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintax$result;

      /* select the action based on the action number */
      switch (CUP$sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // T ::= P_izq S P_der 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // T ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // T ::= Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= T 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E Op_ar T 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EA ::= E 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EA",4, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EA ::= E Op_rel E 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EA",4, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EL ::= EA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EL",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EL ::= EL Op_log EA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("EL",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // S ::= EL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARA ::= Para DECLARACION Hasta DECLARACION SENTENCIA FinPara 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SI ::= Si P_izq S P_der Entonces SENTENCIA Sino SENTENCIA FinSi 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SI ::= Si P_izq S P_der Entonces SENTENCIA FinSi 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MIENTRAS ::= Mientras P_izq S P_der Hacer SENTENCIA FinMientras 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ES ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ES",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ES ::= ES Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ES",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ES ::= Cadena 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ES",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ES ::= ES Cadena 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ES",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESCRIBIR ::= Escribir ES P_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",10, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PEDIR ::= Leer Id P_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("PEDIR",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Id ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Id",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Id ::= Id Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("Id",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= T_dato Id Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= T_dato Id P_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Entero Id Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Entero Id P_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= PARA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA PARA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SI 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA SI 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA MIENTRAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ESCRIBIR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA ESCRIBIR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= PEDIR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA PEDIR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Programa Identificador SENTENCIA FinPrograma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Programa SENTENCIA FinPrograma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintax$stack.elementAt(CUP$sintax$top-1)).value;
		RESULT = start_val;
              CUP$sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintax$parser.done_parsing();
          return CUP$sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

